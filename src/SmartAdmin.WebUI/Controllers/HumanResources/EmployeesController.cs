using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using SideXC.WebUI.Classes;
using SideXC.WebUI.Data;
using SideXC.WebUI.Models.Human_Resources;
using SideXC.WebUI.Models.Local;
using SideXC.WebUI.Models.Map;
using SideXC.WebUI.Models.Security;

namespace SideXC.WebUI.Controllers.HumanResources
{
    public class EmployeesController : BaseController
    {
        private readonly ApplicationDbContext _context;

        public EmployeesController(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> Index()
        {
            return View(await _context.Employees.Include(p=> p.Position).Include(e=> e.Contacts).ThenInclude(c=> c.ContactType).Include(a=> a.Address).ThenInclude(n=> n.Neighborhood).ThenInclude(c=> c.City).ThenInclude(s=> s.State).ThenInclude(c=> c.Country).ToListAsync());
        }

        // GET: Employees/Create
        public IActionResult Create()
        {
            var listPositions = _context.Positions.Where(c => c.Active == true).ToList();
            var listProfiles = _context.Profiles.Where(c => c.Active == true).ToList();
            var listContactTypes = _context.ContactTypes.Where(c => c.Active == true).ToList();
            ViewBag.PasswordAutoGenerated = Common.GetRandomAlphanumericString(8);
            ViewBag.Positions = new SelectList(listPositions, "Id", "Description", 0);
            ViewBag.Profiles = new SelectList(listProfiles, "Id", "Description", 0);
            ViewBag.ContactTypes = new SelectList(listContactTypes, "Id", "Description", 0);
            return View();
        }

        [UserAuthentication]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(Employee employee, IFormCollection collection)
        {
            var name = collection["Name"].ToString();
            var lastName1 = collection["LastName1"].ToString();
            var lastName2 = collection["LastName2"].ToString();
            var positionId = int.Parse(collection["ddPositions"].ToString());
            var grossSalary = double.Parse(collection["GrossSalary"].ToString());
            var netSalary = double.Parse(collection["NetSalary"].ToString());
            var dailySalary = double.Parse(collection["DailySalary"].ToString());
            var integratedDailySalary = double.Parse(collection["IntegratedDailySalary"].ToString());
            var street = collection["txtStreet"].ToString();
            var externalNumber = collection["txtExternalNumber"].ToString();
            var internalNumber = collection["txtInternalNumber"].ToString();
            var ziCode = collection["txtZipCode"].ToString();
            var coloniaId = int.Parse(collection["ddColonia"].ToString());
            var email = collection["txtEmail"].ToString();
            var password = collection["txtPassword"].ToString();
            var profileId = int.Parse(collection["ddProfile"].ToString());
            var profile = _context.Profiles.FirstOrDefault(p=> p.Id == profileId);
            var contacts = collection["hddContacts"].ToString();
            var listContacts = JsonConvert.DeserializeObject<List<lContacts>>(contacts).ToList();
            var position = _context.Positions.FirstOrDefault(p => p.Id == positionId);
            var colonia = _context.Neighborhoods.Include(c => c.City).ThenInclude(s => s.State).ThenInclude(c => c.Country).FirstOrDefault(n => n.Id == coloniaId);

            // Create address
            var address = new Address()
            {
                Street = street,
                ExternalNumber = externalNumber,
                InternalNumber = internalNumber,
                Neighborhood = colonia,
                Active = true,
                Created = DateTime.Now,
                CreatedBy = null,//Comms:Modificar a que sea variable
                Modified = DateTime.Now,
                ModifiedBy = null//Comms:Modificar a que sea variable
            };
            //Create contacts
            foreach(var item in listContacts)
            {
                var contactType = _context.ContactTypes.FirstOrDefault(c=> c.Id == item.ContactTypeId);
                var contact = new EmployeeContact()
                {
                    ContactType = contactType,
                    Description = item.Description,                    
                    Created = DateTime.Now,
                    CreatedBy = null,//Comms:Modificar a que sea variable
                    Modified = DateTime.Now,
                    ModifiedBy = null//Comms:Modificar a que sea variable
                };
                employee.AddContact(contact);
            }
            //create users
            var existsUser = _context.ClientUsers.FirstOrDefault(e => e.Email == email);
            var statusClient = _context.StatusClientUsers.FirstOrDefault(s=> s.Id == 2);
            var newUser = new ClientUser() {
                UID = Guid.NewGuid(),
                Email = email,
                Password = password,
                Profile = profile,
                LastAccess = DateTime.Now,
                FailNumberAccess = 0,
                Status = statusClient,
                Created = DateTime.Now,
                CreatedBy = 0,//Comms:Modificar a que sea variable
                Modified = DateTime.Now,
                ModifiedBy = 0//Comms:Modificar a que sea variable
            };


            if(existsUser != null)
            {
                ModelState.AddModelError("err", "Ya existe el empleado con este correo.");
                var listPositions = _context.Positions.Where(c => c.Active == true).ToList();
                var listProfiles = _context.Profiles.Where(c => c.Active == true).ToList();
                var listContactTypes = _context.ContactTypes.Where(c => c.Active == true).ToList();
                ViewBag.PasswordAutoGenerated = Common.GetRandomAlphanumericString(8);
                ViewBag.Positions = new SelectList(listPositions, "Id", "Description", 0);
                ViewBag.Profiles = new SelectList(listProfiles, "Id", "Description", 0);
                ViewBag.ContactTypes = new SelectList(listContactTypes, "Id", "Description", 0);
                return View(employee);
            }

            _context.Add(newUser);

            employee.Name = name;
            employee.LastName1 = lastName1;
            employee.LastName2 = lastName2;
            employee.EmployeeNumber = CreateEmployeeConsecutive(); 
            employee.GrossSalary = grossSalary;
            employee.NetSalary = netSalary;
            employee.DailySalary = dailySalary;
            employee.IntegratedDailySalary = integratedDailySalary;
            employee.Position = position;
            employee.Address = address;
            employee.PhotUrl = string.Empty;
            employee.Active = true;
            employee.Created = DateTime.Now;
            employee.CreatedBy = null;//Comms:Modificar a que sea variable
            employee.Modified = DateTime.Now;
            employee.ModifiedBy = null;//Comms:Modificar a que sea variable
            _context.Add(employee);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }
        private string CreateEmployeeConsecutive()
        {
            var hayConsecutivo = _context.EmployeeConsecutives.FirstOrDefault(s => s.Created == DateTime.Today);
            EmployeeConsecutive consecutive;

            if (hayConsecutivo == null)
            {
                consecutive = new EmployeeConsecutive()
                {
                    Folio = 1,
                    Created = DateTime.Today,
                    CreatedBy = null,
                    Modified = DateTime.Today,
                    ModifiedBy = null
                };
                _context.Add(consecutive);
                _context.SaveChanges();
            }
            else
            {
                consecutive = hayConsecutivo;
                consecutive.Folio += 1;
                _context.SaveChanges();
            }

            return string.Concat(DateTime.Today.Year.ToString().PadLeft(4, '0'),
                                    DateTime.Today.Month.ToString().PadLeft(2, '0'),
                                    DateTime.Today.Day.ToString().PadLeft(2, '0'),
                                    consecutive.Folio.ToString().PadLeft(3, '0')
                                    );
        }

        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var employee = await _context.Employees.FindAsync(id);
            if (employee == null)
            {
                return NotFound();
            }
            return View(employee);
        }

        // POST: Employees/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,Name,LastName1,LastName2,PhotUrl,GrossSalary,NetSalary,DailySalary,IntegratedDailySalary,Active,Created,Modified")] Employee employee)
        {
            if (id != employee.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    employee.Modified = DateTime.Now;
                    employee.ModifiedBy = null;//Comms:Modificar a que sea variable
                    _context.Update(employee);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!EmployeeExists(employee.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(employee);
        }

        private bool EmployeeExists(int id)
        {
            return _context.Employees.Any(e => e.Id == id);
        }

        public string BuscarCodigoPostal(string zipcode)
        {
            var colonias = _context.Neighborhoods.Where(m => m.ZipCode == zipcode).Include(a => a.City).ThenInclude(t => t.State).ThenInclude(s => s.Country).ToList();
            var query = (
                            from c in colonias
                            select new
                            {
                                idColonia = c.Id,
                                Colonia = c.Description,
                                Municipio = c.City?.Description,
                                Estado = c.City?.State?.Description,
                                Pais = c.City?.State?.Country?.Description
                            }
                ).ToList();

            return JsonConvert.SerializeObject(query);
        }
    }
}
